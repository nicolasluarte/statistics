month(df.vert.jump$DATE_DMA)
day(df.vert.jump$DATE_DMA)
year(df.vert.jump$DATE_DMA)
dmy(df.vert.jump$DATE_DMA[1])
dmy(df.vert.jump$DATE_DMA)
# get daily means
df %>%
mutate(r.time = dmy(DATE_DMA))
df <- df %>%
mutate(r.time = dmy(DATE_DMA))
# Vertical Jump without race analysis
df.vert.jump <- df %>% filter(MOV == "VERT_JUMP")
# get daily means
df.vert.jump %>% ggplot(aes(x = r.time, y = ALTURA)) %>%
geom_point()
# get daily means
df.vert.jump %>% ggplot(aes(x = r.time, y = ALTURA)) +
geom_point()
# get daily means
df.vert.jump %>% ggplot(aes(x = r.time, y = ALTURA)) +
geom_point()
# get daily means
df.vert.jump %>% group_by(r.time) %>%
summarise(mean.ALTURA = mean(ALTURA))
# get daily means
df.vert.jump %>% group_by(r.time) %>%
mutate(mean.ALTURA = mean())
# get daily means
df.vert.jump %>% group_by(r.time) %>%
mutate(mean.ALTURA = mean(ALTURA))
# get daily means
df.vert.jump %>% group_by(r.time) %>%
mutate(mean.ALTURA = mean(ALTURA)) %>%
mutate(mean.POWER.MAX = mean(POWER.MAX))
# get daily means
df.vert.jump <- df.vert.jump %>% group_by(r.time) %>%
mutate(mean.ALTURA = mean(ALTURA)) %>%
mutate(mean.POWER.MAX = mean(POWER.MAX))
View(df.vert.jump)
# plot
df.vert.jump %>% ggplot(aes(x = r.time, y = mean.ALTURA)) +
geom_point()
# plot
df.vert.jump %>% ggplot(aes(x = r.time, y = mean.ALTURA)) +
geom_line()
# get daily means
df.vert.jump <- df.vert.jump %>% group_by(r.time) %>%
mutate(mean.ALTURA = mean(ALTURA)) %>%
mutate(max.ALTURA = max(ALTURA)) %>%
mutate(mean.POWER.MAX = mean(POWER.MAX))
# plot
df.vert.jump %>% ggplot(aes(x = r.time, y = mean.ALTURA)) +
geom_line()
# plot
df.vert.jump %>% ggplot(aes(x = r.time, y = mean.ALTURA)) +
geom_line() +
geom_line(aes(x = r.time, y = max.ALTURA))
# plot
df.vert.jump %>% ggplot(aes(x = r.time, y = mean.ALTURA)) +
geom_line() +
geom_line(aes(x = r.time, y = max.ALTURA)) %>%
geom_legend()
# plot
df.vert.jump %>% ggplot(aes(x = r.time, y = mean.ALTURA), color = "steelblue") +
geom_line() +
geom_line(aes(x = r.time, y = max.ALTURA), color = "darkred") %>%
geom_legend()
# plot
df.vert.jump %>% ggplot(aes(x = r.time, y = mean.ALTURA), color = "steelblue") +
geom_line() +
geom_line(aes(x = r.time, y = max.ALTURA), color = "darkred")
# plot
df.vert.jump.plot <- df.vert.jump %>%
select(r.time, mean.ALTURA, max.ALTURA, mean.POWER.MAX) %>%
gather(key = "variable", value = "value", -date)
# plot
df.vert.jump.plot <- df.vert.jump %>%
select(r.time, mean.ALTURA, max.ALTURA, mean.POWER.MAX) %>%
gather(key = "variable", value = "value", -r.time)
View(df.vert.jump.plot)
df.vert.jump %>% ggplot(aes(x = r.time, y = value)) +
geom_line(aes(color = variable, linetype = variable))
df.vert.jump %>% ggplot(aes(x = r.time, y = value)) +
geom_line()
df.vert.jump.plot %>% ggplot(aes(x = r.time, y = value)) +
geom_line(aes(color = variable, linetype = variable))
df.vert.jump.plot %>% ggplot(aes(x = r.time, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
facet_wrap(~variable)
df.vert.jump.plot %>% ggplot(aes(x = r.time, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
facet_wrap(~variable, scales = "free")
# Vertical Jump with race analysis
df.race.jump <- df %>% filter(MOV == "RACE_JUMP")
# get daily means
df.race.jump <- df.race.jump %>% group_by(r.time) %>%
mutate(mean.ALTURA = mean(ALTURA)) %>%
mutate(max.ALTURA = max(ALTURA)) %>%
mutate(mean.POWER.MAX = mean(POWER.MAX))
# plot
df.race.jump.plot <- df.race.jump %>%
select(r.time, mean.ALTURA, max.ALTURA, mean.POWER.MAX) %>%
gather(key = "variable", value = "value", -r.time)
df.race.jump.plot %>% ggplot(aes(x = r.time, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
facet_wrap(~variable, scales = "free")
pacman::p_load(googledrive, ggplot2, tidyverse, ggrepel, pheatmap, reshape2, manipulate, lubridate)
workbooks <- drive_find()
data <- drive_get(as_id('1MX0Y1RvHgOLT_z9MKa652zZJkEr-QcXMav9AJ5NxRh8'))
drive_download(data, type="csv", overwrite = TRUE)
df <- read.csv('Velocity_Profile.csv', header=TRUE)
df <- df %>%
mutate(r.time = dmy(DATE_DMA))
# Vertical Jump without race analysis
df.vert.jump <- df %>% filter(MOV == "VERT_JUMP")
# get daily means
df.vert.jump <- df.vert.jump %>% group_by(r.time) %>%
mutate(mean.ALTURA = mean(ALTURA)) %>%
mutate(max.ALTURA = max(ALTURA)) %>%
mutate(mean.POWER.MAX = mean(POWER.MAX))
# plot
df.vert.jump.plot <- df.vert.jump %>%
select(r.time, mean.ALTURA, max.ALTURA, mean.POWER.MAX) %>%
gather(key = "variable", value = "value", -r.time)
df.vert.jump.plot %>% ggplot(aes(x = r.time, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
facet_wrap(~variable, scales = "free")
df.vert.jump.plot %>% ggplot(aes(x = r.time, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
facet_wrap(~variable, scales = "free")
# Vertical Jump with race analysis
df.race.jump <- df %>% filter(MOV == "RACE_JUMP")
# get daily means
df.race.jump <- df.race.jump %>% group_by(r.time) %>%
mutate(mean.ALTURA = mean(ALTURA)) %>%
mutate(max.ALTURA = max(ALTURA)) %>%
mutate(mean.POWER.MAX = mean(POWER.MAX))
# plot
df.race.jump.plot <- df.race.jump %>%
select(r.time, mean.ALTURA, max.ALTURA, mean.POWER.MAX) %>%
gather(key = "variable", value = "value", -r.time)
df.race.jump.plot %>% ggplot(aes(x = r.time, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
facet_wrap(~variable, scales = "free")
# get daily means
df.race.jump <- df.race.jump %>% group_by(r.time) %>%
mutate(mean.ALTURA = mean(ALTURA)) %>%
mutate(max.ALTURA = max(ALTURA)) %>%
mutate(mean.POWER.MAX = mean(POWER.MAX))
# Vertical Jump without race analysis
df.vert.jump <- df %>% filter(MOV == "VERT_JUMP")
# get daily means
df.vert.jump <- df.vert.jump %>% group_by(r.time) %>%
mutate(mean.ALTURA = mean(ALTURA)) %>%
mutate(max.ALTURA = max(ALTURA)) %>%
mutate(mean.POWER.MAX = mean(POWER.MAX))
# plot
df.vert.jump.plot <- df.vert.jump %>%
select(r.time, mean.ALTURA, max.ALTURA, mean.POWER.MAX) %>%
gather(key = "variable", value = "value", -r.time)
df.vert.jump.plot %>% ggplot(aes(x = r.time, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
facet_wrap(~variable, scales = "free")
# Vertical Jump without race analysis
df.vert.jump <- df %>% filter(MOV == "VERT_JUMP")
# get daily means
df.vert.jump <- df.vert.jump %>% group_by(r.time) %>%
mutate(mean.ALTURA = mean(ALTURA)) %>%
mutate(max.ALTURA = max(ALTURA)) %>%
mutate(mean.POWER.MAX = mean(POWER.MAX))
# plot
df.vert.jump.plot <- df.vert.jump %>%
select(r.time, mean.ALTURA, max.ALTURA, mean.POWER.MAX) %>%
gather(key = "variable", value = "value", -r.time)
df.vert.jump.plot %>% ggplot(aes(x = r.time, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
facet_wrap(~variable, scales = "free")
# Vertical Jump with race analysis
df.race.jump <- df %>% filter(MOV == "RACE_JUMP")
# get daily means
df.race.jump <- df.race.jump %>% group_by(r.time) %>%
mutate(mean.ALTURA = mean(ALTURA)) %>%
mutate(max.ALTURA = max(ALTURA)) %>%
mutate(mean.POWER.MAX = mean(POWER.MAX))
# plot
df.race.jump.plot <- df.race.jump %>%
select(r.time, mean.ALTURA, max.ALTURA, mean.POWER.MAX) %>%
gather(key = "variable", value = "value", -r.time)
df.race.jump.plot %>% ggplot(aes(x = r.time, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
facet_wrap(~variable, scales = "free")
data <- drive_get(as_id('1MX0Y1RvHgOLT_z9MKa652zZJkEr-QcXMav9AJ5NxRh8'))
drive_download(data, type="csv", overwrite = TRUE)
df <- read.csv('Velocity_Profile.csv', header=TRUE)
df <- df %>%
mutate(r.time = dmy(DATE_DMA))
# Vertical Jump without race analysis
df.vert.jump <- df %>% filter(MOV == "VERT_JUMP")
# get daily means
df.vert.jump <- df.vert.jump %>% group_by(r.time) %>%
mutate(mean.ALTURA = mean(ALTURA)) %>%
mutate(max.ALTURA = max(ALTURA)) %>%
mutate(mean.POWER.MAX = mean(POWER.MAX))
# plot
df.vert.jump.plot <- df.vert.jump %>%
select(r.time, mean.ALTURA, max.ALTURA, mean.POWER.MAX) %>%
gather(key = "variable", value = "value", -r.time)
df.vert.jump.plot %>% ggplot(aes(x = r.time, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
facet_wrap(~variable, scales = "free")
# Vertical Jump with race analysis
df.race.jump <- df %>% filter(MOV == "RACE_JUMP")
# get daily means
df.race.jump <- df.race.jump %>% group_by(r.time) %>%
mutate(mean.ALTURA = mean(ALTURA)) %>%
mutate(max.ALTURA = max(ALTURA)) %>%
mutate(mean.POWER.MAX = mean(POWER.MAX))
# plot
df.race.jump.plot <- df.race.jump %>%
select(r.time, mean.ALTURA, max.ALTURA, mean.POWER.MAX) %>%
gather(key = "variable", value = "value", -r.time)
df.race.jump.plot %>% ggplot(aes(x = r.time, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
facet_wrap(~variable, scales = "free")
pacman::p_load(tidyverse,
ggplot2,
lme4,
caret,
e1071,
pROC,
rms,
ggeffects,
lmtest,
brglm2)
## ggplot theme for plots
theme_article <- function() {
theme_bw(base_size = 12, base_family = "") %+replace%
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "white"),
text = element_text(size = 15),
plot.title = element_text(hjust = 0.5))
}
## read the data
data <- read_csv('data/complete_data.csv')
## read the data
data <- read_csv('data/complete_data.csv')
cwd(/home/nicoluarte/statistics)
setwd('/home/nicoluarte/statistics')
## read the data
data <- read_csv('data/complete_data.csv')
## read the data
data <- read_csv('/data/complete_data.csv')
## read the data
data <- read_csv('/data/complete_data.csv')
setwd('/home/nicoluarte/statistics/Ismael')
## read the data
data <- read_csv('data/complete_data.csv')
## change colnames
names(data) <- c("control_stress", "beta_power",
"gamma_power", "alpha_power",
"reported_anxiety", "participant_number")
## dependent as factor
data$reported_anxiety <- as.factor(data$reported_anxiety)
data$control_stress <- as.factor(data$control_stress)
data$participant_number[3062:5911] <- c(data$participant_number[3062:5911]) + 21
## scale the variables
data_scaled <- data %>%
mutate(beta_power_scaled = scale(beta_power),
gamma_power_scaled = scale(gamma_power),
alpha_power_scaled = scale(alpha_power),
outcome = factor(control_stress, labels = c("control", "stress")))
data_scaled$participant_number <- as.factor(data_scaled$participant_number)
test_data <- data_scaled %>% group_by(participant_number) %>%
summarise(beta_mean = mean(beta_power),
gamma_mean = mean(gamma_power),
alpha_mean = mean(alpha_power),
control_stress = names(which.max(table(reported_anxiety))),
n = n(),
condition = as.numeric(control_stress),
outcome = names(which.max(table(outcome))))
test_data$control_stress <- as.factor(test_data$control_stress)
## scale by condition
model_data <- test_data %>%
mutate_at(c("beta_mean", "gamma_mean", "alpha_mean"), scale)
## Model with only intercept
intercept_only <- glm(control_stress ~ 1,
family = binomial(link="logit"),
data = model_data)
summary(intercept_only)
## Model with beta as predictor
test_beta <- glm(control_stress ~ as.vector(beta_mean),
family = binomial(link="logit"),
data = model_data)
summary(test_beta)
exp(coef(test_beta))
# Model with gamma as predictor
test_gamma <- glm(control_stress ~ as.vector(gamma_mean),
family = binomial(link="logit"),
data = model_data)
summary(test_gamma)
# Model with alpha as predictor
test_alpha <- glm(as.factor(control_stress) ~ alpha_mean,
family = binomial(link="logit"),
data = model_data)
summary(test_alpha)
## repeated k-fold cross validation
train_control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
savePredictions = TRUE,
classProbs = TRUE,
summaryFunction = twoClassSummary)
model <- train(form = outcome ~ beta_mean,
data = model_data,
trControl = train_control,
method = "glm",
family = "binomial")
summary(model)
print(model)
caret::confusionMatrix(model)
model$results
model_gamma <- train(form = outcome ~ gamma_mean,
data = model_data,
trControl = train_control,
method = "glm",
family = "binomial")
summary(model_gamma)
print(model_gamma)
caret::confusionMatrix(model_gamma)
model_gamma$results
model_null <- train(form = outcome ~ gamma_mean,
data = model_data,
trControl = train_control,
method = "glm",
family = "binomial")
summary(model_null)
print(model_null)
caret::confusionMatrix(model_null)
## Results Beta model
## Accuracy: 0.8508
## Kappa: 0.7018
## AUC: 0.9375
## Sens: 0.895
## Spec: 0.8266
## Estimate beta_mean: 2.9156, std error: 0.9161; Walds Z: 3.183, Pr(>|Z|): 0.00146; conf int (1.1201, 4.7111)
## Estimate Intercept: 0.1245, std error: 0.4293; Walds Z: 0.290, Pr(>|Z|): 0.77181; conf int (-0.7168, 0.9658)
## McFadden's pseudo R^2: 0.4051708
## Likelihood ratio test: Df: 1; Chisq: 23.591; Pr(>Chisq): < 0.001
waldtest(test_beta, test = c("Chisq"))
confint.default(test_beta)
waldtest(test_gamma, test = c("Chisq"))
confint.default(test_gamma)
lrtest(intercept_only, test_gamma)
lrtest(intercept_only, test_beta)
aod::wald.test(b = coef(test_gamma), Sigma = vcov(test_beta), Terms = 1:1)
model_perf <- lrm(control_stress ~ beta_mean, data = model_data)
model_pred <- predict(test_beta, type = "response")
model_data$prob <- model_pred
roc_curve <- roc(control_stress ~ prob, data = model_data)
conf_mat <- confusionMatrix(confusionMatrix(model)$table)
roc_curve
## Plots
ggroc(roc_curve, legacy.axes = TRUE) + theme_article() + ggtitle("Beta power model ROC\n") +
geom_abline(intercept = 0, slope = 1, color = "darkgrey", linetype = "dashed")
plot_model <- ggpredict(test_beta, terms = c(as.vector("beta_mean"))) %>%
plot() +
xlab("Beta power Z-score") +
ylab("Pr(Stress condition)") +
labs(color = "") +
ylim(c(0, 1)) +
xlim(c(-1, 1)) +
geom_point(data = test_data, aes(x = beta_mean,
y = condition,
colour = control_stress), alpha = 0.3) +
scale_colour_manual(values=c("blue", "red"), labels = c("Control", "Stress")) +
ggtitle("Beta model\n") +
theme_article()
plot(plot_model)
## Plots
ggroc(roc_curve, legacy.axes = TRUE) + theme_article() + ggtitle("Beta power model ROC\n") +
geom_abline(intercept = 0, slope = 1, color = "darkgrey", linetype = "dashed")
plot_model <- ggpredict(test_beta, terms = c(as.vector("beta_mean"))) %>%
plot() +
xlab("Beta power Z-score") +
ylab("Pr(Stress condition)") +
labs(color = "") +
ylim(c(0, 1)) +
xlim(c(-1, 1)) +
geom_point(data = test_data, aes(x = beta_mean,
y = condition,
colour = control_stress), alpha = 0.3) +
scale_colour_manual(values=c("gray", "green"), labels = c("Control", "Stress")) +
ggtitle("Beta model\n") +
theme_article()
plot(plot_model)
plot_model_gamma <- ggpredict(test_gamma, terms = c(as.vector("gamma_mean"))) %>%
plot() +
xlab("Gamma power Z-score") +
ylab("Pr(Stress condition)") +
labs(color = "") +
ylim(c(0, 1)) +
xlim(c(-1, 1)) +
geom_point(data = test_data, aes(x = beta_mean,
y = condition,
colour = control_stress), alpha = 0.3) +
scale_colour_manual(values=c("gray", "green"), labels = c("Control", "Stress")) +
ggtitle("Gamma model\n") +
theme_article()
plot(plot_model_gamma)
plot_model_gamma <- ggpredict(test_gamma, terms = c(as.vector("gamma_mean"))) %>%
plot() +
xlab("Gamma power Z-score") +
ylab("Pr(Stress condition)") +
labs(color = "") +
ylim(c(0, 1)) +
xlim(c(-1, 1)) +
geom_point(data = test_data, aes(x = gamma_mean,
y = condition,
colour = control_stress), alpha = 0.3) +
scale_colour_manual(values=c("gray", "green"), labels = c("Control", "Stress")) +
ggtitle("Gamma model\n") +
theme_article()
plot(plot_model_gamma)
pacman::p_load(tidyverse,
ggplot2,
lme4,
caret,
e1071,
pROC,
rms,
ggeffects,
lmtest,
brglm2,
ggpubr)
# facet wrap
grid.arrange(plot_model_beta, plot_model_gamma)
pacman::p_load(tidyverse,
ggplot2,
lme4,
caret,
e1071,
pROC,
rms,
ggeffects,
lmtest,
brglm2,
gridExtra)
# facet wrap
grid.arrange(plot_model_beta, plot_model_gamma)
plot_model_beta <- ggpredict(test_beta, terms = c(as.vector("beta_mean"))) %>%
plot() +
xlab("Beta power Z-score") +
ylab("Pr(Stress condition)") +
labs(color = "") +
ylim(c(0, 1)) +
xlim(c(-1, 1)) +
geom_point(data = test_data, aes(x = beta_mean,
y = condition,
colour = control_stress), alpha = 0.3) +
scale_colour_manual(values=c("gray", "green"), labels = c("Control", "Stress")) +
ggtitle("Beta model\n") +
theme_article()
plot(plot_model_beta)
plot_model_gamma <- ggpredict(test_gamma, terms = c(as.vector("gamma_mean"))) %>%
plot() +
xlab("Gamma power Z-score") +
ylab("Pr(Stress condition)") +
labs(color = "") +
ylim(c(0, 1)) +
xlim(c(-1, 1)) +
geom_point(data = test_data, aes(x = gamma_mean,
y = condition,
colour = control_stress), alpha = 0.3) +
scale_colour_manual(values=c("gray", "green"), labels = c("Control", "Stress")) +
ggtitle("Gamma model\n") +
theme_article()
plot(plot_model_gamma)
# facet wrap
grid.arrange(plot_model_beta, plot_model_gamma)
plot_model_beta <- ggpredict(test_beta, terms = c(as.vector("beta_mean"))) %>%
plot() +
xlab("Beta power Z-score") +
ylab("Pr(Stress condition)") +
labs(color = "") +
ylim(c(0, 1)) +
xlim(c(-1, 1)) +
geom_point(data = test_data, aes(x = beta_mean,
y = condition,
colour = control_stress), alpha = 0.3) +
scale_colour_manual(values=c("gray", "green"), labels = c("Control", "Stress")) +
ggtitle("Beta model\n") +
theme_article()
plot(plot_model_beta)
plot_model_gamma <- ggpredict(test_gamma, terms = c(as.vector("gamma_mean"))) %>%
plot() +
xlab("Gamma power Z-score") +
ylab("Pr(Stress condition)") +
labs(color = "") +
ylim(c(0, 1)) +
xlim(c(-1, 1)) +
geom_point(data = test_data, aes(x = gamma_mean,
y = condition,
colour = control_stress), alpha = 0.3) +
scale_colour_manual(values=c("gray", "green"), labels = c("Control", "Stress")) +
ggtitle("Gamma model\n") +
theme_article()
plot(plot_model_gamma)
# facet wrap
grid.arrange(plot_model_beta, plot_model_gamma)
